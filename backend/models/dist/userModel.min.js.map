{"version":3,"sources":["userModel.js"],"names":["mongoose","require","validator","Schema","bcrypt","type","String","userSchema","required","email","isEmail","validate","password","isStrongPassword","passwordConfirm","val","this","message","media","default","timestamps","pre","isModified","next","hash","undefined","methods","correctPassword","candidatePassword","userPassword","regeneratorRuntime","async","_context2","prev","awrap","abrupt","sent","stop","User","model","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,UAAYD,QAAQ,aADpBD,OAAWC,QAAQ,YACnBC,WAAYD,IAAOD,SAACG,OAIxB,CAHIC,KAAM,CAKNC,KAAMC,OAHNC,SAAU,EAAG,EAAIP,2BAGjBK,MAAMC,CACNE,KAAQF,OAHZE,SAAA,EAAA,EAAA,0BAKEC,SAAO,CAAAP,UAAAQ,QAAA,wBAELF,SAAU,CACVG,KAAQL,OARZK,SAAA,CAUEC,UAAUC,iBACJ,wHAMNC,gBAAiB,CACfT,KAAMC,OACNE,SAAW,EAAA,EAAM,gCACjBG,SAAU,CACRT,UAAW,SAAAa,GACT,OAAOA,IAAQC,KAAKJ,UAEtBK,QAAS,8BAGbC,MAAO,CACLb,KAAMC,OACNa,QAFK,mGAYXZ,CAAuBa,YAAA,IAAAb,WAAAc,IAChB,OAAKC,SAAWC,GAAXD,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GADWN,KAAAM,WAAA,YACXA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SADWC,KACXD,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MADWlB,OAAAoB,KAAAR,KAAAJ,SAAA,KACXU,KAAAA,EADWN,KAAAJ,SACXU,EAAAA,KAGVN,KAAKF,qBAAkBW,EAEvBF,IALUD,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,QADWf,WAAAmB,QAAAC,gBAAA,SAUrBC,EAVqBC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAT,MAAA,KAAA,EAAA,OAAAS,EAAAT,KAAA,EAAAO,mBAAAI,MAIhBpB,OAAAA,QAALc,EAAAC,IAJqB,KAAA,EAAA,OAAAG,EAAAG,OAAA,SAAAH,EAAAI,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAK,WAAA,IAAAC,KAAAtC,SAAAuC,MAAA,OAAAhC,YAAAiC,OAAAC,QAAAH","file":"userModel.min.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst validator = require('validator');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n      validate: [validator.isEmail, 'Enter A Valid Email'],\r\n    },\r\n    password: {\r\n      type: String,\r\n      validate: [\r\n        validator.isStrongPassword,\r\n        'Enter A Strong Password With minLength: 8,  minlowercase letter:1 ,minlowercase letter:1 min number:1, min symbol:1',\r\n      ],\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      required: [true, 'Please confirm your password'],\r\n      validate: {\r\n        validator: function (val) {\r\n          return val === this.password;\r\n        },\r\n        message: 'Password Are not the same',\r\n      },\r\n    },\r\n    media: {\r\n      type: String,\r\n      default:\r\n        'https://res.cloudinary.com/df4jdldmb/image/upload/v1710254408/samples/r3k1s9k9qicbrrg7kfnr.png',\r\n    },\r\n  },\r\n\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n  this.password = await bcrypt.hash(this.password, 12);\r\n\r\n  this.passwordConfirm = undefined;\r\n\r\n  next();\r\n});\r\n\r\nuserSchema.methods.correctPassword = async function (\r\n  candidatePassword,\r\n  userPassword\r\n) {\r\n  return await bcrypt.compare(candidatePassword, userPassword);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nmodule.exports = User;\r\n"]}