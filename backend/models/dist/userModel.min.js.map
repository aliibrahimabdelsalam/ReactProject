{"version":3,"sources":["userModel.js"],"names":["mongoose","require","validator","Schema","bcrypt","type","String","userSchema","required","email","isEmail","validate","password","isStrongPassword","passwordConfirm","val","this","message","media","pre","next","regeneratorRuntime","async","_context","prev","isModified","abrupt","awrap","hash","sent","undefined","stop","methods","correctPassword","candidatePassword","userPassword","_context2","User","model","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,UAAYD,QAAQ,aADpBD,OAAWC,QAAQ,YACnBC,WAAYD,IAAOD,SAACG,OAIxB,CAHIC,KAAM,CAKNC,KAAMC,OAHNC,SAAU,EAAG,EAAIP,2BAGjBK,MAAMC,CACNE,KAAQF,OAHZE,SAAA,EAAA,EAAA,0BAKEC,SAAO,CAAAP,UAAAQ,QAAA,wBAELF,SAAU,CACVG,KAAQL,OARZK,SAAA,CAUEC,UAAUC,iBACJ,wHAMNC,gBAAiB,CACfT,KAAMC,OACNE,SAAW,EAAA,EAAM,gCACjBG,SAAU,CACRT,UAAW,SAAAa,GACT,OAAOA,IAAQC,KAAKJ,UAEtBK,QAAS,8BAGbC,MAAO,CACLb,KAAMC,SA7BZ,CAsCAC,YAAe,IAAQA,WAAAY,IAAA,OAAA,SAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAH,MAAA,KAAA,EAAA,GAAAJ,KAAAS,WACXA,YADW,CAAAF,EAAAH,KAAA,EAAA,MAAA,OAAAG,EAAAG,OAAA,SAAAN,KAAA,KAAA,EAAA,OAAAG,EAAAH,KAAA,EAAAC,mBAAAM,MAAAvB,OAAAwB,KAAAZ,KAAAJ,SAAA,KAAA,KAAA,EAAAI,KAAAJ,SAAAW,EAAAM,KAAAb,KAAAF,qBAAAgB,EAAAV,IAAA,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAQ,SAAA,KAAAf,QAAAT,WAAAyB,QAAAC,gBAAA,SAAAC,EAWrBC,GAXqB,OAAAd,mBAAAC,MAAA,SAAAc,GAAA,OAAA,OAAAA,EAAAZ,KAAAY,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAhB,KAAA,EAAAC,mBAAAM,MAEhBf,OAAAA,QAFgBsB,EAAAC,IAAA,KAAA,EAAA,OAAAC,EAAAV,OAAA,SAAAU,EAAAP,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAO,EAAAL,WAgBvB,IAAMM,KAAOrC,SAASsC,MAAM,OAAQ/B,YAhBbgC,OAAAC,QAAAH","file":"userModel.min.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst validator = require('validator');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n      validate: [validator.isEmail, 'Enter A Valid Email'],\r\n    },\r\n    password: {\r\n      type: String,\r\n      validate: [\r\n        validator.isStrongPassword,\r\n        'Enter A Strong Password With minLength: 8,  minlowercase letter:1 ,minlowercase letter:1 min number:1, min symbol:1',\r\n      ],\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      required: [true, 'Please confirm your password'],\r\n      validate: {\r\n        validator: function (val) {\r\n          return val === this.password;\r\n        },\r\n        message: 'Password Are not the same',\r\n      },\r\n    },\r\n    media: {\r\n      type: String,\r\n    },\r\n  },\r\n\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n  this.password = await bcrypt.hash(this.password, 12);\r\n\r\n  this.passwordConfirm = undefined;\r\n\r\n  next();\r\n});\r\n\r\nuserSchema.methods.correctPassword = async function (\r\n  candidatePassword,\r\n  userPassword\r\n) {\r\n  return await bcrypt.compare(candidatePassword, userPassword);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nmodule.exports = User;\r\n"]}