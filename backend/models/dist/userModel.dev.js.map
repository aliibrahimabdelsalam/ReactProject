{"version":3,"sources":["userModel.js"],"names":["mongoose","require","validator","bcrypt","userSchema","Schema","name","type","String","required","email","validate","isEmail","password","isStrongPassword","passwordConfirm","val","message","media","timestamps","pre","next","isModified","hash","undefined","methods","correctPassword","candidatePassword","userPassword","compare","User","model","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CACjB;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,wBAAP;AAFN,GADR;AAKEC,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,wBAAP,CAFL;AAGLE,IAAAA,QAAQ,EAAE,CAACT,SAAS,CAACU,OAAX,EAAoB,qBAApB;AAHL,GALT;AAUEC,EAAAA,QAAQ,EAAE;AACRN,IAAAA,IAAI,EAAEC,MADE;AAERG,IAAAA,QAAQ,EAAE,CACRT,SAAS,CAACY,gBADF,EAER,qHAFQ;AAFF,GAVZ;AAiBEC,EAAAA,eAAe,EAAE;AACfR,IAAAA,IAAI,EAAEC,MADS;AAEfC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,8BAAP,CAFK;AAGfE,IAAAA,QAAQ,EAAE;AACRT,MAAAA,SAAS,EAAE,mBAAUc,GAAV,EAAe;AACxB,eAAOA,GAAG,KAAK,KAAKH,QAApB;AACD,OAHO;AAIRI,MAAAA,OAAO,EAAE;AAJD;AAHK,GAjBnB;AA2BEC,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAEC,MADD;AAEL,eACE;AAHG;AA3BT,CADiB,EAmCjB;AACEW,EAAAA,UAAU,EAAE;AADd,CAnCiB,CAAnB;AAwCAf,UAAU,CAACgB,GAAX,CAAe,MAAf,EAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,cAChB,KAAKC,UAAL,CAAgB,UAAhB,CADgB;AAAA;AAAA;AAAA;;AAAA,2CACoBD,IAAI,EADxB;;AAAA;AAAA;AAAA,0CAEClB,MAAM,CAACoB,IAAP,CAAY,KAAKV,QAAjB,EAA2B,EAA3B,CAFD;;AAAA;AAErB,eAAKA,QAFgB;AAIrB,eAAKE,eAAL,GAAuBS,SAAvB;AAEAH,UAAAA,IAAI;;AANiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AASAjB,UAAU,CAACqB,OAAX,CAAmBC,eAAnB,GAAqC,kBACnCC,iBADmC,EAEnCC,YAFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAItBzB,MAAM,CAAC0B,OAAP,CAAeF,iBAAf,EAAkCC,YAAlC,CAJsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArC;;AAOA,IAAME,IAAI,GAAG9B,QAAQ,CAAC+B,KAAT,CAAe,MAAf,EAAuB3B,UAAvB,CAAb;AACA4B,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["const mongoose = require('mongoose');\r\nconst validator = require('validator');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, 'Please Enter Your Name'],\r\n      validate: [validator.isEmail, 'Enter A Valid Email'],\r\n    },\r\n    password: {\r\n      type: String,\r\n      validate: [\r\n        validator.isStrongPassword,\r\n        'Enter A Strong Password With minLength: 8,  minlowercase letter:1 ,minlowercase letter:1 min number:1, min symbol:1',\r\n      ],\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      required: [true, 'Please confirm your password'],\r\n      validate: {\r\n        validator: function (val) {\r\n          return val === this.password;\r\n        },\r\n        message: 'Password Are not the same',\r\n      },\r\n    },\r\n    media: {\r\n      type: String,\r\n      default:\r\n        'https://res.cloudinary.com/df4jdldmb/image/upload/v1710254408/samples/r3k1s9k9qicbrrg7kfnr.png',\r\n    },\r\n  },\r\n\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nuserSchema.pre('save', async function (next) {\r\n  if (!this.isModified('password')) return next();\r\n  this.password = await bcrypt.hash(this.password, 12);\r\n\r\n  this.passwordConfirm = undefined;\r\n\r\n  next();\r\n});\r\n\r\nuserSchema.methods.correctPassword = async function (\r\n  candidatePassword,\r\n  userPassword\r\n) {\r\n  return await bcrypt.compare(candidatePassword, userPassword);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nmodule.exports = User;\r\n"],"file":"userModel.dev.js"}