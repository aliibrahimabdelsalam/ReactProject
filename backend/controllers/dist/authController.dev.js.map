{"version":3,"sources":["authController.js"],"names":["require","promisify","jwt","expressHandler","User","userValidation","createToken","uploadMedia","AppError","config","exports","signup","req","res","next","newUser","name","body","email","password","passwordConfirm","error","value","details","message","findOne","existingUser","create","login","user","correctPassword","getUser","console","log","params","id","findById","status","json","data","edit","file","path","uploadRes","findByIdAndUpdate","media","secure_url","headers","authorization","startsWith","token","split","cookies","decoded","verify","process","env","JWT_SECRET"],"mappings":"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","sourcesContent":["const { promisify } = require('util');\r\nconst jwt = require('jsonwebtoken');\r\nconst expressHandler = require('express-async-handler');\r\nconst User = require('../models/userModel');\r\nconst userValidation = require('../utils/validation/userValidation');\r\nconst createToken = require('../utils/createToken');\r\nconst uploadMedia = require('../utils/uploadMedia');\r\nconst AppError = require('../utils/appError');\r\nrequire('dotenv').config();\r\nexports.signup = expressHandler(async (req, res, next) => {\r\n  // const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  const { error, value } = userValidation.newUser({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    // media: uploadRes.secure_url,\r\n  });\r\n  if (error) {\r\n    return next(new AppError(error.details[0].message, 400));\r\n  }\r\n\r\n  const existingUser = await User.findOne({ email: value.email });\r\n  if (existingUser) {\r\n    return next(new AppError('Email already exists', 400));\r\n  }\r\n\r\n  const newUser = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    // media: uploadRes.secure_url,\r\n  });\r\n\r\n  createToken(newUser, 201, req, res);\r\n});\r\n\r\nexports.login = expressHandler(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    return next(new AppError('Email And Password Are Required', 400));\r\n  }\r\n\r\n  const user = await User.findOne({ email: email });\r\n\r\n  if (!user || !(await user.correctPassword(password, user.password))) {\r\n    return next(new AppError('Incorrect Email Or Password', 400));\r\n  }\r\n\r\n  createToken(user, 200, req, res);\r\n});\r\n\r\nexports.getUser = expressHandler(async (req, res, next) => {\r\n  console.log(req.params.id);\r\n  const user = await User.findById(req.params.id);\r\n  if (!user) {\r\n    return next(new AppError('User not Found', 400));\r\n  }\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n});\r\nexports.edit = expressHandler(async (req, res, next) => {\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n  const user = await User.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      media: uploadRes.secure_url,\r\n    },\r\n    {\r\n      new: true,\r\n    }\r\n  );\r\n  res.status(201).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n});\r\n\r\nexports.protected = expressHandler(async (req, res, next) => {\r\n  let token;\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith('Bearer')\r\n  ) {\r\n    token = req.headers.authorization.split(' ')[1];\r\n  } else if (req.cookies.jwt) {\r\n    token = req.cookies.jwt;\r\n  }\r\n\r\n  if (!token) {\r\n    return next(\r\n      new AppError('You Are Not Logged In! Please Log In To Get Access.', 401)\r\n    );\r\n  }\r\n  const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n  req.user = decoded;\r\n  next();\r\n});\r\n"],"file":"authController.dev.js"}