{"version":3,"sources":["authController.js"],"names":["require","promisify","jwt","expressHandler","userValidation","uploadMedia","config","exports","signup","req","res","next","_userValidation$newUs","error","value","newUser","regeneratorRuntime","async","_context","prev","createToken","email","body","passwordConfirm","abrupt","AppError","details","message","awrap","User","findOne","sent","create","name","password","stop","login","_req$body","user","_context2","t0","existingUser","getUser","_context3","console","log","params","id","findById","status","json","data","uploadRes","_context4","findByIdAndUpdate","media","secure_url","new","token","decoded","_context5","headers","authorization","startsWith","split","cookies","verify","process","env","JWT_SECRET"],"mappings":"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","file":"authController.min.js","sourcesContent":["const { promisify } = require('util');\r\nconst jwt = require('jsonwebtoken');\r\nconst expressHandler = require('express-async-handler');\r\nconst User = require('../models/userModel');\r\nconst userValidation = require('../utils/validation/userValidation');\r\nconst createToken = require('../utils/createToken');\r\nconst uploadMedia = require('../utils/uploadMedia');\r\nconst AppError = require('../utils/appError');\r\nrequire('dotenv').config();\r\nexports.signup = expressHandler(async (req, res, next) => {\r\n  // const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  const { error, value } = userValidation.newUser({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    // media: uploadRes.secure_url,\r\n  });\r\n  if (error) {\r\n    return next(new AppError(error.details[0].message, 400));\r\n  }\r\n\r\n  const existingUser = await User.findOne({ email: value.email });\r\n  if (existingUser) {\r\n    return next(new AppError('Email already exists', 400));\r\n  }\r\n\r\n  const newUser = await User.create({\r\n    name: req.body.name,\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    passwordConfirm: req.body.passwordConfirm,\r\n    // media: uploadRes.secure_url,\r\n  });\r\n\r\n  createToken(newUser, 201, req, res);\r\n});\r\n\r\nexports.login = expressHandler(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    return next(new AppError('Email And Password Are Required', 400));\r\n  }\r\n\r\n  const user = await User.findOne({ email: email });\r\n\r\n  if (!user || !(await user.correctPassword(password, user.password))) {\r\n    return next(new AppError('Incorrect Email Or Password', 400));\r\n  }\r\n\r\n  createToken(user, 200, req, res);\r\n});\r\n\r\nexports.getUser = expressHandler(async (req, res, next) => {\r\n  console.log(req.params.id);\r\n  const user = await User.findById(req.params.id);\r\n  if (!user) {\r\n    return next(new AppError('User not Found', 400));\r\n  }\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n});\r\nexports.edit = expressHandler(async (req, res, next) => {\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n  const user = await User.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      media: uploadRes.secure_url,\r\n    },\r\n    {\r\n      new: true,\r\n    }\r\n  );\r\n  res.status(201).json({\r\n    status: 'success',\r\n    data: user,\r\n  });\r\n});\r\n\r\nexports.protected = expressHandler(async (req, res, next) => {\r\n  let token;\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith('Bearer')\r\n  ) {\r\n    token = req.headers.authorization.split(' ')[1];\r\n  } else if (req.cookies.jwt) {\r\n    token = req.cookies.jwt;\r\n  }\r\n\r\n  if (!token) {\r\n    return next(\r\n      new AppError('You Are Not Logged In! Please Log In To Get Access.', 401)\r\n    );\r\n  }\r\n  const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n  req.user = decoded;\r\n  next();\r\n});\r\n"]}