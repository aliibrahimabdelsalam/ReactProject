{"version":3,"sources":["PostController.js"],"names":["expressHandler","require","Post","uploadMedia","exports","postValidation","req","res","next","uploadRes","_postValidation$newPo","error","value","newPost","regeneratorRuntime","async","_context","prev","awrap","file","path","sent","description","body","createPost","id","media","secure_url","AppError","abrupt","console","log","create","status","json","data","stop","find","posts","result","length","getPostsByUser","_context3","user","params","post","_context4","updatePost","_context5","findById","_id","toString","findByIdAndUpdate","new","runValidators","_context6","findByIdAndDelete"],"mappings":"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","file":"PostController.min.js","sourcesContent":["const expressHandler = require('express-async-handler');\r\nconst Post = require('../models/postModel');\r\nconst postValidation = require('../utils/validation/postValidation');\r\nconst uploadMedia = require('../utils/uploadMedia');\r\nconst AppError = require('../utils/appError');\r\n\r\nexports.createPost = expressHandler(async (req, res, next) => {\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  // if (!req.body.user) req.body.user = req.user.id;\r\n  const { error, value } = postValidation.newPost({\r\n    description: req.body.description,\r\n    user: req.user.id,\r\n    media: uploadRes.secure_url,\r\n  });\r\n\r\n  if (error) {\r\n    return next(new AppError('please enter valid data', 400));\r\n  }\r\n  console.log('here');\r\n  const newPost = await Post.create(value);\r\n  console.log(newPost);\r\n  res.status(201).json({\r\n    status: 'success',\r\n    data: newPost,\r\n  });\r\n});\r\n\r\nexports.getAllPosts = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find();\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getPostsByUser = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find({ user: req.params.id });\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getOnePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.updatePost = expressHandler(async (req, res, next) => {\r\n  let post;\r\n  post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  post = await Post.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      description: req.body.description,\r\n      user: req.body.user,\r\n      media: uploadRes.secure_url,\r\n    },\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.deletePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n\r\n  await Post.findByIdAndDelete(req.params.id);\r\n  res.status(204).json({\r\n    status: 'success',\r\n    data: null,\r\n  });\r\n});\r\n"]}