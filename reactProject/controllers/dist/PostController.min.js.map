{"version":3,"sources":["PostController.js"],"names":["expressHandler","require","Post","uploadMedia","exports","postValidation","req","res","next","uploadRes","_postValidation$newPo","error","value","newPost","regeneratorRuntime","async","_context","prev","awrap","file","path","sent","description","body","createPost","id","media","secure_url","AppError","abrupt","console","log","create","status","json","data","stop","find","posts","result","length","getPostsByUser","_context3","user","params","post","_context4","getAllPosts","_context5","findById","_id","toString","findByIdAndUpdate","new","runValidators","_context6","findByIdAndDelete"],"mappings":"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","file":"PostController.min.js","sourcesContent":["const expressHandler = require('express-async-handler');\r\nconst Post = require('../models/postModel');\r\nconst postValidation = require('../utils/validation/postValidation');\r\nconst uploadMedia = require('../utils/uploadMedia');\r\nconst AppError = require('../utils/appError');\r\n\r\nexports.createPost = expressHandler(async (req, res, next) => {\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  // if (!req.body.user) req.body.user = req.user.id;\r\n  const { error, value } = postValidation.newPost({\r\n    description: req.body.description,\r\n    user: req.user.id,\r\n    media: uploadRes.secure_url,\r\n  });\r\n\r\n  if (error) {\r\n    return next(new AppError('please enter valid data', 400));\r\n  }\r\n  console.log('here');\r\n  const newPost = await Post.create(value);\r\n  console.log(newPost);\r\n  res.status(201).json({\r\n    status: 'success',\r\n    data: newPost,\r\n  });\r\n});\r\n\r\nexports.getAllPosts = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find();\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getPostsByUser = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find({ user: req.params.id });\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getOnePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.updatePost = expressHandler(async (req, res, next) => {\r\n  let post;\r\n  post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  post = await Post.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      description: req.body.description,\r\n      user: req.body.user,\r\n      media: uploadRes.secure_url,\r\n    },\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.deletePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n\r\n  await Post.findByIdAndDelete(req.params.id);\r\n  res.status(204).json({\r\n    status: 'success',\r\n    data: null,\r\n  });\r\n});\r\n"]}