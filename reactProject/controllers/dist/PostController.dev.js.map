{"version":3,"sources":["PostController.js"],"names":["expressHandler","require","Post","postValidation","uploadMedia","AppError","exports","createPost","req","res","next","file","path","uploadRes","newPost","description","body","user","id","media","secure_url","error","value","console","log","create","status","json","data","getAllPosts","find","posts","result","length","getPostsByUser","params","getOnePost","findById","post","updatePost","_id","toString","findByIdAndUpdate","runValidators","deletePost","findByIdAndDelete"],"mappings":";;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAA9B;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,oCAAD,CAA9B;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,mBAAD,CAAxB;;AAEAK,OAAO,CAACC,UAAR,GAAqBP,cAAc,CAAC,iBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACVN,WAAW,CAACI,GAAG,CAACG,IAAJ,CAASC,IAAV,CADD;;AAAA;AAC5BC,UAAAA,SAD4B;AAGlC;AAHkC,kCAITV,cAAc,CAACW,OAAf,CAAuB;AAC9CC,YAAAA,WAAW,EAAEP,GAAG,CAACQ,IAAJ,CAASD,WADwB;AAE9CE,YAAAA,IAAI,EAAET,GAAG,CAACS,IAAJ,CAASC,EAF+B;AAG9CC,YAAAA,KAAK,EAAEN,SAAS,CAACO;AAH6B,WAAvB,CAJS,EAI1BC,KAJ0B,yBAI1BA,KAJ0B,EAInBC,KAJmB,yBAInBA,KAJmB;;AAAA,eAU9BD,KAV8B;AAAA;AAAA;AAAA;;AAAA,2CAWzBX,IAAI,CAAC,IAAIL,QAAJ,CAAa,yBAAb,EAAwC,GAAxC,CAAD,CAXqB;;AAAA;AAalCkB,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAbkC;AAAA,0CAcZtB,IAAI,CAACuB,MAAL,CAAYH,KAAZ,CAdY;;AAAA;AAc5BR,UAAAA,OAd4B;AAelCS,UAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACAL,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAEd;AAFa,WAArB;;AAhBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAnC;AAsBAR,OAAO,CAACuB,WAAR,GAAsB7B,cAAc,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACfR,IAAI,CAAC4B,IAAL,EADe;;AAAA;AAC7BC,UAAAA,KAD6B;AAGnCtB,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBM,YAAAA,MAAM,EAAED,KAAK,CAACE,MAFK;AAGnBL,YAAAA,IAAI,EAAEG;AAHa,WAArB;;AAHmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAApC;AASAzB,OAAO,CAAC4B,cAAR,GAAyBlC,cAAc,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAClBR,IAAI,CAAC4B,IAAL,CAAU;AAAEb,YAAAA,IAAI,EAAET,GAAG,CAAC2B,MAAJ,CAAWjB;AAAnB,WAAV,CADkB;;AAAA;AAChCa,UAAAA,KADgC;AAEtCtB,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBM,YAAAA,MAAM,EAAED,KAAK,CAACE,MAFK;AAGnBL,YAAAA,IAAI,EAAEG;AAHa,WAArB;;AAFsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAvC;AAQAzB,OAAO,CAAC8B,UAAR,GAAqBpC,cAAc,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACfR,IAAI,CAACmC,QAAL,CAAc7B,GAAG,CAAC2B,MAAJ,CAAWjB,EAAzB,CADe;;AAAA;AAC5BoB,UAAAA,IAD4B;;AAAA,cAG7BA,IAH6B;AAAA;AAAA;AAAA;;AAAA,4CAIzB5B,IAAI,CAAC,IAAIL,QAAJ,CAAa,gBAAb,EAA+B,GAA/B,CAAD,CAJqB;;AAAA;AAOlCI,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAEU;AAFa,WAArB;;AAPkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAnC;AAaAhC,OAAO,CAACiC,UAAR,GAAqBvC,cAAc,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAErBR,IAAI,CAACmC,QAAL,CAAc7B,GAAG,CAAC2B,MAAJ,CAAWjB,EAAzB,CAFqB;;AAAA;AAElCoB,UAAAA,IAFkC;;AAAA,cAI7BA,IAJ6B;AAAA;AAAA;AAAA;;AAAA,4CAKzB5B,IAAI,CAAC,IAAIL,QAAJ,CAAa,gBAAb,EAA+B,GAA/B,CAAD,CALqB;;AAAA;AAAA,gBAQ9BG,GAAG,CAACS,IAAJ,CAASC,EAAT,KAAgBoB,IAAI,CAACrB,IAAL,CAAUuB,GAAV,CAAcC,QAAd,EARc;AAAA;AAAA;AAAA;;AAAA,4CASzB/B,IAAI,CACT,IAAIL,QAAJ,CACE,2GADF,EAEE,GAFF,CADS,CATqB;;AAAA;AAAA;AAAA,0CAgBVD,WAAW,CAACI,GAAG,CAACG,IAAJ,CAASC,IAAV,CAhBD;;AAAA;AAgB5BC,UAAAA,SAhB4B;AAAA;AAAA,0CAkBrBX,IAAI,CAACwC,iBAAL,CACXlC,GAAG,CAAC2B,MAAJ,CAAWjB,EADA,EAEX;AACEH,YAAAA,WAAW,EAAEP,GAAG,CAACQ,IAAJ,CAASD,WADxB;AAEEE,YAAAA,IAAI,EAAET,GAAG,CAACQ,IAAJ,CAASC,IAFjB;AAGEE,YAAAA,KAAK,EAAEN,SAAS,CAACO;AAHnB,WAFW,EAOX;AACE,mBAAK,IADP;AAEEuB,YAAAA,aAAa,EAAE;AAFjB,WAPW,CAlBqB;;AAAA;AAkBlCL,UAAAA,IAlBkC;AA+BlC7B,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAEU;AAFa,WAArB;;AA/BkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAnC;AAqCAhC,OAAO,CAACsC,UAAR,GAAqB5C,cAAc,CAAC,kBAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACfR,IAAI,CAACmC,QAAL,CAAc7B,GAAG,CAAC2B,MAAJ,CAAWjB,EAAzB,CADe;;AAAA;AAC5BoB,UAAAA,IAD4B;;AAAA,cAG7BA,IAH6B;AAAA;AAAA;AAAA;;AAAA,4CAIzB5B,IAAI,CAAC,IAAIL,QAAJ,CAAa,gBAAb,EAA+B,GAA/B,CAAD,CAJqB;;AAAA;AAAA,gBAO9BG,GAAG,CAACS,IAAJ,CAASC,EAAT,KAAgBoB,IAAI,CAACrB,IAAL,CAAUuB,GAAV,CAAcC,QAAd,EAPc;AAAA;AAAA;AAAA;;AAAA,4CAQzB/B,IAAI,CACT,IAAIL,QAAJ,CACE,2GADF,EAEE,GAFF,CADS,CARqB;;AAAA;AAAA;AAAA,0CAgB5BH,IAAI,CAAC2C,iBAAL,CAAuBrC,GAAG,CAAC2B,MAAJ,CAAWjB,EAAlC,CAhB4B;;AAAA;AAiBlCT,UAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAE;AAFa,WAArB;;AAjBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAnC","sourcesContent":["const expressHandler = require('express-async-handler');\r\nconst Post = require('../models/postModel');\r\nconst postValidation = require('../utils/validation/postValidation');\r\nconst uploadMedia = require('../utils/uploadMedia');\r\nconst AppError = require('../utils/appError');\r\n\r\nexports.createPost = expressHandler(async (req, res, next) => {\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  // if (!req.body.user) req.body.user = req.user.id;\r\n  const { error, value } = postValidation.newPost({\r\n    description: req.body.description,\r\n    user: req.user.id,\r\n    media: uploadRes.secure_url,\r\n  });\r\n\r\n  if (error) {\r\n    return next(new AppError('please enter valid data', 400));\r\n  }\r\n  console.log('here');\r\n  const newPost = await Post.create(value);\r\n  console.log(newPost);\r\n  res.status(201).json({\r\n    status: 'success',\r\n    data: newPost,\r\n  });\r\n});\r\n\r\nexports.getAllPosts = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find();\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getPostsByUser = expressHandler(async (req, res, next) => {\r\n  const posts = await Post.find({ user: req.params.id });\r\n  res.status(200).json({\r\n    status: 'success',\r\n    result: posts.length,\r\n    data: posts,\r\n  });\r\n});\r\nexports.getOnePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.updatePost = expressHandler(async (req, res, next) => {\r\n  let post;\r\n  post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n  const uploadRes = await uploadMedia(req.file.path);\r\n\r\n  post = await Post.findByIdAndUpdate(\r\n    req.params.id,\r\n    {\r\n      description: req.body.description,\r\n      user: req.body.user,\r\n      media: uploadRes.secure_url,\r\n    },\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n    }\r\n  );\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: post,\r\n  });\r\n});\r\n\r\nexports.deletePost = expressHandler(async (req, res, next) => {\r\n  const post = await Post.findById(req.params.id);\r\n\r\n  if (!post) {\r\n    return next(new AppError('Post Not Found', 404));\r\n  }\r\n\r\n  if (req.user.id !== post.user._id.toString()) {\r\n    return next(\r\n      new AppError(\r\n        'You do not have permission to perform this action. This action is only allowed for the owner of this post',\r\n        403\r\n      )\r\n    );\r\n  }\r\n\r\n  await Post.findByIdAndDelete(req.params.id);\r\n  res.status(204).json({\r\n    status: 'success',\r\n    data: null,\r\n  });\r\n});\r\n"],"file":"PostController.dev.js"}