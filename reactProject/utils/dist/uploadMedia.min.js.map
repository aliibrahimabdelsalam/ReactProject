{"version":3,"sources":["uploadMedia.js"],"names":["cloudinary","require","fs","uploadMedia","mediaPath","uploadRes","regeneratorRuntime","async","_context","prev","next","awrap","uploader","upload","overwrite","invalidate","resource_type","sent","unlinkSync","abrupt","stop","folder"],"mappings":"aAAA,IAAMA,WAAaC,QAAQ,gBACrBC,GAAKD,QAAQ,MAEbE,YAAc,SAAOC,GAAP,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAFZN,EAEY,OAAAI,EAAAE,KAAA,EAAAJ,mBAAAK,MAEQX,WAAWY,SAASC,OAAOT,EAAW,CAF5DD,OAAAA,UAAcW,WAAA,EAAAC,YAAA,EAAAC,cAAA,UAAAR,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,GAEVL,EAFUG,EAAAS,KAAA,OAAAf,GAAAgB,WACdd,GADcI,EAAAW,OAAA,SAAAd,GAAAG,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAW,OAAA,UAaX,GAbW,KAAA,EAAA,IAAA,MAAA,OAAAX,EAAAY,WAGdC,OAAAA,QAAAA","file":"uploadMedia.min.js","sourcesContent":["const cloudinary = require('./cloudinary');\r\nconst fs = require('fs');\r\n\r\nconst uploadMedia = async (mediaPath) => {\r\n  if (mediaPath) {\r\n    const uploadRes = await cloudinary.uploader.upload(mediaPath, {\r\n      folder: 'samples',\r\n      overwrite: true,\r\n      invalidate: true,\r\n      resource_type: 'auto',\r\n    });\r\n    if (uploadRes) {\r\n      fs.unlinkSync(mediaPath);\r\n      return uploadRes;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nmodule.exports = uploadMedia;\r\n"]}